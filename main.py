from fastapi import FastAPI, Request, HTTPException, Form, Depends
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel
from typing import Optional
import anthropic
import httpx
import uuid
import datetime
import json
import os
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
from config import ANTHROPIC_API_KEY, APP_HOST, APP_PORT, DEBUG

# –ü–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –¥–æ–±–∞–≤—å:
# from database.database import create_tables, get_db
# from database.models import User, Test, TestQuestion
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select


# –î–æ–±–∞–≤—å —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤:

async def get_db_connection():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
    import asyncpg
    from config import DATABASE_URL
    clean_url = DATABASE_URL.replace("postgresql+asyncpg://", "postgresql://")
    return await asyncpg.connect(clean_url)

async def create_user_if_not_exists(email: str, password: str, name: str, role: str, department: str):
    """–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    conn = await get_db_connection()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing = await conn.fetchrow("SELECT id FROM users WHERE email = $1", email)
        if not existing:
            await conn.execute(
                "INSERT INTO users (email, password_hash, name, role, department) VALUES ($1, $2, $3, $4, $5)",
                email, password, name, role, department
            )
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {email}")
    finally:
        await conn.close()

async def verify_user_db(email: str, password: str):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    conn = await get_db_connection()
    try:
        user = await conn.fetchrow(
            "SELECT email, name, role, department FROM users WHERE email = $1 AND password_hash = $2",
            email.lower(), password
        )
        return dict(user) if user else None
    finally:
        await conn.close()

from contextlib import asynccontextmanager

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    await create_user_if_not_exists(
        "janaydar@halykbank.kz", 
        "123456", 
        "–ñ–∞–Ω–∞–π–¥–∞—Ä", 
        "HR Manager", 
        "IT"
    )
    await create_user_if_not_exists(
        "janaydarK@halykbank.kz", 
        "123456", 
        "–ñ–∞–Ω–∞–π–¥–∞—Ä –ö.", 
        "Senior HR Manager", 
        "IT"
    )
    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
    
    yield
    
    # Shutdown
    print("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
    
app = FastAPI(
    title="Qabylda HR Tech Eval", 
    description="–°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–ª—è –•–∞–ª—ã–∫ –±–∞–Ω–∫–∞",
    lifespan=lifespan
)


# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
templates = Jinja2Templates(directory="templates")
app.mount("/static", StaticFiles(directory="static"), name="static")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è anthropic (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
if os.getenv("USE_PROXY"):
    proxy_url = "http://172.27.170.56:3142/"
    httpx_client = httpx.Client(proxy=proxy_url)
    client = anthropic.Anthropic(api_key=ANTHROPIC_API_KEY, http_client=httpx_client)
else:
    client = anthropic.Anthropic(api_key=ANTHROPIC_API_KEY)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–ø–æ—Ç–æ–º –∑–∞–º–µ–Ω–∏–º –Ω–∞ PostgreSQL)
users_db = {
    "janaydar@halykbank.kz": {
        "password": "123456",
        "name": "–ñ–∞–Ω–∞–π–¥–∞—Ä",
        "role": "HR Manager",
        "department": "IT",
        "organization": "halyk"
    },
    "janaydarK@halykbank.kz": {
        "password": "123456", 
        "name": "–ñ–∞–Ω–∞–π–¥–∞—Ä –ö.",
        "role": "Senior HR Manager",
        "department": "IT",
        "organization": "halyk"
    }
}

test_sessions = {}
organizations = {
    "halyk": {
        "name": "–•–∞–ª—ã–∫ –±–∞–Ω–∫",
        "logo": "/static/images/halyk_logo_green.jpg",
        "colors": {
            "primary": "#1DB584",
            "secondary": "#FFD700", 
            "accent": "#2C3E50"
        }
    }
}

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class LoginRequest(BaseModel):
    email: str
    password: str

class TestRequest(BaseModel):
    candidate_name: str
    candidate_email: str
    position: str
    specialization: str = "–û–±—â–∏–π"
    level: str
    custom_requirements: str = ""
    optional_technologies: list = []

class AnswerRequest(BaseModel):
    question: str
    answer: str
    session_id: str = ""

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

def get_organization_from_subdomain(request: Request):
    host = request.headers.get("host", "")
    if "halyk." in host or host.startswith("halyk"):
        return "halyk"
    return "halyk"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é



# ===== –ì–õ–ê–í–ù–´–ï –°–¢–†–ê–ù–ò–¶–´ =====

@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥–∏–Ω –¥–ª—è HR –∏–ª–∏ —Ç–µ—Å—Ç –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
    path = request.url.path
    organization = get_organization_from_subdomain(request)
    org_data = organizations[organization]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–¥ —Ç–µ—Å—Ç–∞ –≤ URL
    if len(path) > 1 and path != "/":
        test_code = path[1:]  # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–ª–µ—à
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ—Å—Ç
        if test_code in test_sessions:
            test_data = test_sessions[test_code]
            return templates.TemplateResponse("test_page.html", {
                "request": request,
                "test_code": test_code,
                "test_data": test_data,
                "organization": org_data
            })
        else:
            raise HTTPException(status_code=404, detail="–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞ HR
    return templates.TemplateResponse("index.html", {
        "request": request,
        "organization": org_data
    })

@app.get("/login", response_class=HTMLResponse)
async def login_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –¥–ª—è HR"""
    organization = get_organization_from_subdomain(request)
    org_data = organizations[organization]
    
    return templates.TemplateResponse("login.html", {
        "request": request,
        "organization": org_data
    })

@app.post("/login")
async def login(email: str = Form(...), password: str = Form(...)):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ HR"""
    user = await verify_user_db(email, password)  # ‚Üê –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ë–î
    if not user:
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
    
    return {
        "status": "success",
        "user": {
            "email": email,
            "name": user["name"],
            "role": user["role"],
            "department": user["department"]
        },
        "redirect": "/dashboard"
    }

@app.get("/dashboard", response_class=HTMLResponse)
async def dashboard(request: Request):
    """Dashboard –¥–ª—è HR"""
    organization = get_organization_from_subdomain(request)
    org_data = organizations[organization]
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    return templates.TemplateResponse("dashboard.html", {
        "request": request,
        "organization": org_data
    })

# ===== API –î–õ–Ø –†–ê–ë–û–¢–´ –° –¢–ï–°–¢–ê–ú–ò =====


@app.post("/api/create-test")
async def create_test(test_request: TestRequest):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î"""
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ —Ç–µ—Å—Ç–∞
        test_code = str(uuid.uuid4())[:8].upper()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        conn = await get_db_connection()
        try:
            await conn.execute("""
                INSERT INTO tests (test_code, candidate_name, candidate_email, position, level, 
                                 creator_email, custom_requirements, status, expires_at)
                VALUES ($1, $2, $3, $4, $5, $6, $7, 'created', $8)
            """, 
                test_code,
                test_request.candidate_name,
                test_request.candidate_email, 
                f"{test_request.position} - {test_request.specialization}",
                test_request.level,
                "hr@halykbank.kz",  # –ü–æ—Ç–æ–º –∑–∞–º–µ–Ω–∏–º –Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                test_request.custom_requirements,
                datetime.datetime.now() + datetime.timedelta(days=7)
            )
        finally:
            await conn.close()
        
        return {
            "status": "success",
            "test_code": test_code,
            "test_url": f"/{test_code}",
            "message": f"–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è {test_request.candidate_name}"
        }
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/tests")
async def get_tests(creator_email: Optional[str] = None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    tests = []
    
    for test_code, test_data in test_sessions.items():
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if creator_email and test_data.get("creator_email") != creator_email:
            continue
            
        tests.append({
            "test_code": test_code,
            "candidate_name": f"{test_data['candidate_data'].get('name', '')} {test_data['candidate_data'].get('surname', '')}",
            "position": test_data["position"],
            "level": test_data["level"],
            "status": test_data["status"],
            "created_at": test_data["created_at"].isoformat(),
            "expires_at": test_data["expires_at"].isoformat()
        })
    
    return {
        "status": "success",
        "tests": tests,
        "total": len(tests)
    }
    

# –î–æ–±–∞–≤—å —ç—Ç–æ—Ç —Ä–æ—É—Ç –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü:

@app.get("/create-test", response_class=HTMLResponse)
async def create_test_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    organization = get_organization_from_subdomain(request)
    org_data = organizations[organization]
    
    return templates.TemplateResponse("create_test.html", {
        "request": request,
        "organization": org_data
    })


@app.get("/test-db") 
async def test_database():
    try:
        import asyncpg
        from config import DATABASE_URL
        
        # –£–±–∏—Ä–∞–µ–º +asyncpg –¥–ª—è asyncpg
        clean_url = DATABASE_URL.replace("postgresql+asyncpg://", "postgresql://")
        
        conn = await asyncpg.connect(clean_url)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è HR —Å–∏—Å—Ç–µ–º—ã
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                email VARCHAR(255) UNIQUE NOT NULL,
                password_hash VARCHAR(255) NOT NULL,
                name VARCHAR(255) NOT NULL,
                role VARCHAR(100) NOT NULL,
                department VARCHAR(100),
                created_at TIMESTAMP DEFAULT NOW(),
                is_active BOOLEAN DEFAULT TRUE
            )
        ''')
        
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS tests (
                id SERIAL PRIMARY KEY,
                test_code VARCHAR(50) UNIQUE NOT NULL,
                candidate_name VARCHAR(255) NOT NULL,
                candidate_email VARCHAR(255),
                position VARCHAR(100) NOT NULL,
                level VARCHAR(50) NOT NULL,
                creator_email VARCHAR(255) NOT NULL,
                custom_requirements TEXT,
                created_at TIMESTAMP DEFAULT NOW(),
                started_at TIMESTAMP,
                completed_at TIMESTAMP,
                expires_at TIMESTAMP,
                total_score FLOAT DEFAULT 0.0,
                final_evaluation TEXT,
                status VARCHAR(50) DEFAULT 'created',
                duration_minutes INTEGER,
                violations_count INTEGER DEFAULT 0,
                proctoring_data TEXT
            )
        ''')
        
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS test_questions (
                id SERIAL PRIMARY KEY,
                test_id INTEGER REFERENCES tests(id) ON DELETE CASCADE,
                question_number INTEGER NOT NULL,
                question_type VARCHAR(50) NOT NULL,
                question_text TEXT NOT NULL,
                answer_text TEXT,
                ai_score FLOAT,
                ai_evaluation TEXT,
                typing_speed FLOAT,
                time_spent_seconds INTEGER,
                answered_at TIMESTAMP
            )
        ''')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        tables = await conn.fetch("SELECT tablename FROM pg_tables WHERE schemaname = 'public'")
        table_names = [row['tablename'] for row in tables]
        
        await conn.close()
        
        return {
            "status": "success", 
            "message": "All tables created successfully!",
            "tables": table_names
        }
    except Exception as e:
        return {"status": "error", "message": str(e)}

    
@app.get("/{test_code}", response_class=HTMLResponse)
async def test_page(request: Request, test_code: str):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ—Å—Ç
        conn = await get_db_connection()
        test = await conn.fetchrow("SELECT * FROM tests WHERE test_code = $1", test_code)
        await conn.close()
        
        if not test:
            raise HTTPException(status_code=404, detail="–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        organization = get_organization_from_subdomain(request)
        org_data = organizations[organization]
        
        return templates.TemplateResponse("test_interface.html", {
            "request": request,
            "test_code": test_code,
            "test": dict(test),
            "organization": org_data
        })
    except Exception as e:
        raise HTTPException(status_code=404, detail="–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

# ===== –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° CLAUDE =====

async def generate_main_question(position: str, level: str, question_number: int, custom_requirements: str = ""):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –≤–æ–ø—Ä–æ—Å"""
    custom_part = f"\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è: {custom_requirements}" if custom_requirements else ""
    
    prompt = f"""
    –°–æ–∑–¥–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å ‚Ññ{question_number} –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –Ω–∞ –ø–æ–∑–∏—Ü–∏—é {position} —É—Ä–æ–≤–Ω—è {level} –≤ –•–∞–ª—ã–∫ –±–∞–Ω–∫–µ.
    
    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    - –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    - –ü–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è —É—Ä–æ–≤–Ω—è {level}
    - –¢—Ä–µ–±—É–µ—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –º–∏–Ω–∏–º—É–º)
    - –î–ª–∏–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞: –º–∞–∫—Å–∏–º—É–º 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–π —Å—Ñ–µ—Ä—ã
    - –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–π –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–π{custom_part}
    
    –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Å–∞–º –≤–æ–ø—Ä–æ—Å, –∫—Ä–∞—Ç–∫–æ –∏ —è—Å–Ω–æ.
    """
    
    message = client.messages.create(
        model="claude-3-5-sonnet-20241022",
        max_tokens=150,
        messages=[{"role": "user", "content": prompt}]
    )
    
    return message.content[0].text.strip()

async def generate_extension_question(position: str, level: str, main_question: str, main_answer: str):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å"""
    prompt = f"""
    –ù–∞ –æ—Å–Ω–æ–≤–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞ —Å–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è {position} {level} –≤ –±–∞–Ω–∫–µ.

    –û—Å–Ω–æ–≤–Ω–æ–π –≤–æ–ø—Ä–æ—Å: {main_question}
    –û—Ç–≤–µ—Ç: {main_answer}

    –°–æ–∑–¥–∞–π –æ–¥–∏–Ω —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç—É –¥–æ–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç.
    –ú–∞–∫—Å–∏–º—É–º 1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏ –ø–æ –¥–µ–ª—É.

    –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å.
    """
    
    message = client.messages.create(
        model="claude-3-5-sonnet-20241022",
        max_tokens=100,
        messages=[{"role": "user", "content": prompt}]
    )
    
    return message.content[0].text.strip()

async def evaluate_answer(position: str, level: str, question: str, answer: str):
    """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
    prompt = f"""
    –û—Ü–µ–Ω–∏ –æ—Ç–≤–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é {position} —É—Ä–æ–≤–Ω—è {level} –≤ –±–∞–Ω–∫–µ.

    –í–æ–ø—Ä–æ—Å: {question}
    –û—Ç–≤–µ—Ç: {answer}

    –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏ (—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ –æ—Ü–µ–Ω–∏–≤–∞–π, —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫):
    - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–∫—Ç–æ–≤
    - –ü–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–µ–º—ã
    - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞
    - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Ä–æ–≤–Ω—é {level}
    - –ü—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å –≤ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π —Å—Ñ–µ—Ä–µ

    –í–∞–∂–Ω–æ: 
    - 10 –±–∞–ª–ª–æ–≤ –≤–æ–∑–º–æ–∂–Ω—ã –¥–ª—è –æ—Ç–ª–∏—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    - 8-9 –±–∞–ª–ª–æ–≤ –¥–ª—è —Ö–æ—Ä–æ—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤  
    - 6-7 –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö
    - 4-5 –¥–ª—è —Å–ª–∞–±—ã—Ö
    - 0-3 –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö

    –î–∞–π —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10.
    """
    
    message = client.messages.create(
        model="claude-3-5-sonnet-20241022",
        max_tokens=20,
        messages=[{"role": "user", "content": prompt}]
    )
    
    evaluation_text = message.content[0].text.strip()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
    score = 5  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    try:
        import re
        match = re.search(r'(\d+)', evaluation_text)
        if match:
            score = int(match.group(1))
            score = min(10, max(0, score))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 0-10
    except:
        pass
    
    return score

    



# ===== –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö =====

@app.exception_handler(404)
async def not_found_handler(request: Request, exc: HTTPException):
    return templates.TemplateResponse("404.html", {"request": request}, status_code=404)

@app.exception_handler(500)
async def server_error_handler(request: Request, exc: HTTPException):
    return templates.TemplateResponse("500.html", {"request": request}, status_code=500)

# ===== –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =====

if __name__ == "__main__":
    import uvicorn
    print(f"üöÄ –ó–∞–ø—É—Å–∫ Qabylda HR Tech Eval")
    print(f"üåê –ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞: http://{APP_HOST}:{APP_PORT}")
    print(f"üèõÔ∏è –•–∞–ª—ã–∫ –±–∞–Ω–∫: http://halyk.localhost:{APP_PORT}")
    uvicorn.run(app, host=APP_HOST, port=APP_PORT, reload=DEBUG)